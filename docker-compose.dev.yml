version: "3.8"

services:
  db:
    image: postgres:16.1-bullseye
    restart: always
    ports:
      - ${PG_PORT}:${PG_PORT}
    environment:
      POSTGRES_DB: '${PG_DB}'
      POSTGRES_USER: '${PG_USER_ADMIN}'
      POSTGRES_PASSWORD: '${PG_PASS_ADMIN}'
      POSTGRES_PORT: ${PG_PORT}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: migrate/migrate
    command: -database postgres://${PG_USER_ADMIN}:${PG_PASS_ADMIN}@db:${PG_PORT}/${PG_DB}?sslmode=disable -path /migrations up
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations/:/migrations

  stan:
    image: nats-streaming:alpine3.18
    restart: always
    ports:
      - 4222:4222
      - 8222:8222
    volumes:
      - "stan_data:/data"
    depends_on:
      - db
      - migrations
    command:
      # - "--cluster"
      # - "nats://0.0.0.0:6222"
      - "--cluster_id"
      - ${NATS_CLUSTER_ID}
      # - "--cluster_node_id"
      # - stan-1
      - "--debug"
      - "-store"
      - "file"
      - "--dir"
      - /data/msg
      - "--http_port"
      - "8222"
      - "--port"
      - "4222"
  server: 
    build:
      dockerfile: ./cmd/sub/Dockerfile.dev
    restart: on-failure
    ports:
      - 80:80
    depends_on:
      - stan
    environment:
      POSTGRES_URL: 'postgres://${PG_USER_CLIENT}:${PG_PASS_CLIENT}@db:${PG_PORT}/${PG_DB}'
      NATS_URL: 'nats://stan:4222'
      ORDERS_TOPIC: ${ORDERS_TOPIC}
      STATE: ${STATE}
      NATS_CLUSTER_ID: ${NATS_CLUSTER_ID}

volumes:
  pg_data:
  stan_data: