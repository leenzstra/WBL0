// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leenzstra/WBL0/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IOrderRepo is an autogenerated mock type for the IOrderRepo type
type IOrderRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, order
func (_m *IOrderRepo) Add(ctx context.Context, order models.OrderModel) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderModel) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, uid
func (_m *IOrderRepo) Get(ctx context.Context, uid string) (*models.OrderModel, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.OrderModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OrderModel, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OrderModel); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrderModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *IOrderRepo) GetAll(ctx context.Context) ([]models.OrderModel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.OrderModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.OrderModel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.OrderModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrderModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderRepo creates a new instance of IOrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepo {
	mock := &IOrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
