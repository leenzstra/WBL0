// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ICache is an autogenerated mock type for the ICache type
type ICache[K comparable, V interface{}] struct {
	mock.Mock
}

// GetItem provides a mock function with given fields: key
func (_m *ICache[K, V]) GetItem(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// HasItem provides a mock function with given fields: key
func (_m *ICache[K, V]) HasItem(key K) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for HasItem")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(K) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *ICache[K, V]) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SetItem provides a mock function with given fields: key, value
func (_m *ICache[K, V]) SetItem(key K, value V) bool {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetItem")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(K, V) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewICache creates a new instance of ICache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICache[K comparable, V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ICache[K, V] {
	mock := &ICache[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
